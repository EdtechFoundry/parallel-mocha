#!/usr/bin/env node
'use strict';

const program = require('commander');
const fs = require('fs');
const glob = require('glob');
const Runner = require('../lib/runner');
const async = require('async');
const chalk = require('chalk');

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] <files...>')
  .option('-p, --processes <n>', 'Set number of processes', parseInt)
  .option('-t, --timeout <n>', 'Timeout between testes', parseInt)
  .option('-s, --slow <n>', 'Wait for slow tests', parseInt)
  .parse(process.argv);

let processes = program.processes || 20;
let timeout = program.timeout || 10000;
let slow = program.slow || 2000;
let files = program.args;
let environment = program.environment || 'test';

let resolveFilesQueue = files.map(
  file=>(cb)=> {
    glob(file, cb)
  }
);

async.parallel(resolveFilesQueue, (err, files)=> {
  if (err) {
    throw err;
  }

  files = files.reduce((files, file)=> {
    return files.concat(file);
  }, []);

  var runner = new Runner(files, {
    processes: files.length,
    timeout: timeout,
    slow: slow,
    env: environment
  });

  runner.run((error) => {
    if (error) {
      console.log(chalk.red(`Failed: ${error.message}`));
      // Force epic fail
      process.exit(1);
    } else {
      console.log(chalk.green('All test passed!!'));
      process.exit(0);
    }
  });
});
